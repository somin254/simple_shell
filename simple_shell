 /**
 * main - Entry point for the simple shell.
 *
 * This shell takes a single command at a time, executes it, and waits for
 * the next command. It displays a prompt, handles end-of-file conditions
 * (Ctrl+D), and prints an error message if the command is not found.
 *
 * Return: Always 0.
 */

#include "shell.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 1024

int main(void) {
    char command[MAX_COMMAND_LENGTH];

    while (1) {
        printf("%s", PROMPT);

        if (fgets(command, sizeof(command), stdin) == NULL) {
            // Handle end of file (Ctrl+D)
            printf("\n");
            break;
        }
command[strcspn(command, "\n")] = '\0';

        if (strcmp(command, "exit") == 0) {
            break;
        }

        pid_t pid = fork();

        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            // Child process
            if (execlp(command, command, NULL) == -1) {
                perror("execlp");
exit(EXIT_FAILURE);
            }
        } else {
int status;
if (waitpid(pid, &status, 0) == -1) {
perror("waitpid");
exit(EXIT_FAILURE);
}
if (WIFEXITED(status) && WEXITSTATUS(status) != 0) {
fprintf(stderr, "./shell: %s: command not found\n", command);
}
}
}
return 0;
}
